# GitHub Action 的名称
name: Publish Helm Charts to GitHub Pages

# 触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches:
      - main
  # 允许你手动在 Actions 标签页中触发此工作流
  workflow_dispatch:

# 为整个工作流设置权限，这是使用官方 actions/deploy-pages 所必需的
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # 第一个任务：构建和打包 Helm Charts
  build:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出你的仓库代码
      - name: Checkout
        uses: actions/checkout@v4

      # 步骤 2: 安装 Helm
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest' # 你也可以指定一个具体的 Helm 版本，例如 '3.12.0'

      # 步骤 3: 运行脚本来打包 charts 并生成索引
      - name: Package Helm Charts and Generate Index
        run: |
          # 设置 GitHub Pages 的 URL，用于生成 index.yaml 中的绝对 URL
          # GITHUB_REPOSITORY 的格式是 "owner/repo-name"
          REPO_URL="https://charts.redish101.top"

          # 创建一个临时目录来存放打包后的 charts
          CHART_OUTPUT_DIR="./.charts"
          mkdir -p "$CHART_OUTPUT_DIR"

          # 查找所有 Chart.yaml 文件，并打包它们所在的目录
          echo "Finding and packaging charts..."
          for chart_dir in $(find . -name "Chart.yaml" | xargs -n 1 dirname); do
            # 跳过 .github 目录或其他你不想打包的目录
            if [[ "$chart_dir" == *".github"* ]]; then
              echo "Skipping chart in $chart_dir"
              continue
            fi
            echo "Packaging chart in $chart_dir..."
            helm package "$chart_dir" --destination "$CHART_OUTPUT_DIR"
          done
          
          # 检查是否有 chart 被打包
          if [ -z "$(ls -A $CHART_OUTPUT_DIR/*.tgz)" ]; then
            echo "No charts were packaged. Exiting."
            exit 0 # 正常退出，避免工作流失败
          fi

          # 为打包好的 charts 生成索引文件
          echo "Generating Helm repository index..."
          helm repo index "$CHART_OUTPUT_DIR" --url "$REPO_URL"

          echo "Generated index.yaml:"
          cat "$CHART_OUTPUT_DIR/index.yaml"

      # 步骤 4: 上传构建产物 (包含了 .tgz 文件和 index.yaml)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 上传 .charts 目录中的所有内容
          path: './.charts'

  # 第二个任务：将构建产物部署到 GitHub Pages
  deploy:
    # 依赖于 build 任务成功完成
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4